/*
 * Part of the ROBOID project
 * Copyright (C) 2016 Kwang-Hyun Park (akaii@kw.ac.kr) and Kyoung Jin Kim
 * https://github.com/roboidstudio/embedded
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
*/

package org.roboid.studio.robotcomposer.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.roboid.robot.provider.AudioChannelItemProvider;
import org.roboid.robot.provider.ColorChannelItemProvider;
import org.roboid.robot.provider.CommandChannelItemProvider;
import org.roboid.robot.provider.ControlItemProvider;
import org.roboid.robot.provider.LinearChannelItemProvider;
import org.roboid.robot.provider.MatrixChannelItemProvider;
import org.roboid.robot.provider.TextChannelItemProvider;
import org.roboid.robot.provider.VoiceChannelItemProvider;
import org.roboid.robot.util.RobotAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * @author Kyoung Jin Kim
 * @author Kwang-Hyun Park
 * <!-- end-user-doc -->
 * @generated
 */
public class RobotItemProviderAdapterFactory extends RobotAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RobotItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.Robot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RobotItemProvider robotItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.Robot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRobotAdapter()
	{
		if (robotItemProvider == null)
		{
			robotItemProvider = new RobotItemProvider(this);
		}

		return robotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.Roboid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoboidItemProvider roboidItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.Roboid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoboidAdapter()
	{
		if (roboidItemProvider == null)
		{
			roboidItemProvider = new RoboidItemProvider(this);
		}

		return roboidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.Protocol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtocolItemProvider protocolItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.Protocol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtocolAdapter()
	{
		if (protocolItemProvider == null)
		{
			protocolItemProvider = new ProtocolItemProvider(this);
		}

		return protocolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.Control} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlItemProvider controlItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.Control}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlAdapter()
	{
		if (controlItemProvider == null)
		{
			controlItemProvider = new ControlItemProvider(this);
		}

		return controlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorAdapter()
	{
		if (sensorItemProvider == null)
		{
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.Effector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EffectorItemProvider effectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.Effector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEffectorAdapter()
	{
		if (effectorItemProvider == null)
		{
			effectorItemProvider = new EffectorItemProvider(this);
		}

		return effectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.Command} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandItemProvider commandItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.Command}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandAdapter()
	{
		if (commandItemProvider == null)
		{
			commandItemProvider = new CommandItemProvider(this);
		}

		return commandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter()
	{
		if (eventItemProvider == null)
		{
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.LinearChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinearChannelItemProvider linearChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.LinearChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinearChannelAdapter()
	{
		if (linearChannelItemProvider == null)
		{
			linearChannelItemProvider = new LinearChannelItemProvider(this);
		}

		return linearChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.CommandChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandChannelItemProvider commandChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.CommandChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandChannelAdapter()
	{
		if (commandChannelItemProvider == null)
		{
			commandChannelItemProvider = new CommandChannelItemProvider(this);
		}

		return commandChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.AudioChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioChannelItemProvider audioChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.AudioChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioChannelAdapter()
	{
		if (audioChannelItemProvider == null)
		{
			audioChannelItemProvider = new AudioChannelItemProvider(this);
		}

		return audioChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.VoiceChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VoiceChannelItemProvider voiceChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.VoiceChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVoiceChannelAdapter()
	{
		if (voiceChannelItemProvider == null)
		{
			voiceChannelItemProvider = new VoiceChannelItemProvider(this);
		}

		return voiceChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.ColorChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorChannelItemProvider colorChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.ColorChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorChannelAdapter()
	{
		if (colorChannelItemProvider == null)
		{
			colorChannelItemProvider = new ColorChannelItemProvider(this);
		}

		return colorChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.TextChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextChannelItemProvider textChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.TextChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextChannelAdapter()
	{
		if (textChannelItemProvider == null)
		{
			textChannelItemProvider = new TextChannelItemProvider(this);
		}

		return textChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.roboid.robot.MatrixChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatrixChannelItemProvider matrixChannelItemProvider;

	/**
	 * This creates an adapter for a {@link org.roboid.robot.MatrixChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatrixChannelAdapter()
	{
		if (matrixChannelItemProvider == null)
		{
			matrixChannelItemProvider = new MatrixChannelItemProvider(this);
		}

		return matrixChannelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (robotItemProvider != null) robotItemProvider.dispose();
		if (roboidItemProvider != null) roboidItemProvider.dispose();
		if (protocolItemProvider != null) protocolItemProvider.dispose();
		if (controlItemProvider != null) controlItemProvider.dispose();
		if (sensorItemProvider != null) sensorItemProvider.dispose();
		if (effectorItemProvider != null) effectorItemProvider.dispose();
		if (commandItemProvider != null) commandItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (linearChannelItemProvider != null) linearChannelItemProvider.dispose();
		if (commandChannelItemProvider != null) commandChannelItemProvider.dispose();
		if (audioChannelItemProvider != null) audioChannelItemProvider.dispose();
		if (voiceChannelItemProvider != null) voiceChannelItemProvider.dispose();
		if (colorChannelItemProvider != null) colorChannelItemProvider.dispose();
		if (textChannelItemProvider != null) textChannelItemProvider.dispose();
		if (matrixChannelItemProvider != null) matrixChannelItemProvider.dispose();
	}

}
